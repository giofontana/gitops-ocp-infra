apiVersion: batch/v1
kind: Job
metadata:
  name: updated-image-integration-creds
  namespace: stackrox
  labels:
    app.kubernetes.io/instance: advanced-cluster-security
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: '5'
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 6
  template:
    metadata:
      labels:
        job-name: updated-image-integration-creds
    spec:
      containers:
        - name: updated-image-integration-creds
          image: >-
            image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
          command:
            - /bin/bash
            - '-c'
            - >
              #!/usr/bin/env bash


              # Create a temporary python script to handle the JSON transformations.

              cat << EOF > /tmp/jsontransform.py

              import sys,json;


              # Read temporary integrations list.

              intfile = open("/tmp/imageintegrations.json",'r')

              jsonobj = json.loads(intfile.read())

              intfile.close()

              # Print list for debug purposes
              print("Current integrations")
              print(json.dumps(jsonobj, indent=2))

              generated = 'no'

              for integration in jsonobj["integrations"]:
                  if "openshift-image-registry" in integration["name"]:
                      if "Autogenerated" in integration["name"]:
                          print("Current registration found, modifying existing one")
                          generated = 'yes'
                          integrationId = integration["id"];
                          integration.pop("id", None)
                          integration["name"] = integration["name"].replace("Autogenerated", "GitOps Job generated")
                          integration["autogenerated"] = False
                          integration["skipTestIntegration"] = False
                          integration["docker"]["username"] = sys.argv[1]
                          integration["docker"]["password"] = sys.argv[2]
                          with open("/tmp/integration_" + integrationId + "_data.json", 'w') as patchfile:
                            json.dump(integration, patchfile, indent=2)
                      if "GitOps" in integration["name"]:
                          print("GitOps generated found, skipping")
                          generated = 'yes'


              if generated == 'no':
                  print("Autogenerated registration not found, adding a new one")
                  registry = {}
                  registry['id'] = ''
                  registry['name'] = 'GitOps Job generated openshift-image-registry'
                  registry['categories'] = ["REGISTRY"]
                  registry['docker'] = ''
                  registry['docker'] = {"endpoint": "image-registry.openshift-image-registry.svc:5000", "username": sys.argv[1], "password": sys.argv[2], "insecure": True}
                  registry['autogenerated'] = False
                  registry['clusterId'] = ''
                  registry['clusters'] = []
                  registry['skipTestIntegration'] = False
                  registry['type'] = 'docker'
                  print(json.dumps(registry, indent=2))
                  with open("/tmp/integration_new_data.json", 'w') as patchfile:
                      json.dump(registry, patchfile, indent=2)

              EOF

              # Wait for central to be ready

              attempt_counter=0

              max_attempts=20

              echo "Waiting for central to be available..."

              until $(curl -k --output /dev/null --silent --head --fail https://central.stackrox.svc.cluster.local); do
                  if [ ${attempt_counter} -eq ${max_attempts} ];then
                    echo "Max attempts reached"
                    exit 1
                  fi

                  printf '.'
                  attempt_counter=$(($attempt_counter+1))
                  echo "Made attempt $attempt_counter, waiting..."
                  sleep 10
              done


              # It takes some time for default integrations to be created, so sleep for 3min.

              sleep 180

              echo "Getting stackrox-image-puller service account token and Central URL."

              SATOKEN=`oc get secret stackrox-image-puller-token-secret -n stackrox -o jsonpath="{.data.token}" | base64 --decode`

              CENTRAL_URL="https://`oc -n stackrox get route central -o go-template='{{.spec.host}}'`"

              API="/v1/imageintegrations"


              echo "Central API endpoint for image integrations: $CENTRAL_URL$API"

              ENDPOINT=$CENTRAL_URL$API

              echo $ENDPOINT

              echo "Getting default image integrations list."

              curl -k -X GET -u "admin:$PASSWORD" -H "Content-Type: application/json" -o /tmp/imageintegrations.json "$ENDPOINT"

              echo "Parsing and updating internal registry integrations."

              python3 /tmp/jsontransform.py stackrox-image-puller $SATOKEN


              # Execute PUT commands to update ocp internal registry integrations.

              for file in `ls /tmp | grep "integration_"`

              do
                  INTID=${file#*_}
                  INTID=${INTID%_*}
                  # Old URL if using PUT
                  # echo "URL: $CENTRAL_URL$API/$INTID"
                  echo "URL: $CENTRAL_URL$API"
                  echo "File ID: $INTID"

                  curl -k \
                    -X POST -u "admin:$PASSWORD" \
                    -H "Content-Type: application/json" \
                    --data @/tmp/$file \
                    $CENTRAL_URL$API
                  rm /tmp/$file
              done


              echo "Internal integrations updated."
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: central-htpasswd
                  key: password
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Never
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccountName: stackrox-image-integration-update-job
      serviceAccount: stackrox-image-integration-update-job
      securityContext: {}
      schedulerName: default-scheduler
  completionMode: NonIndexed
  suspend: false
